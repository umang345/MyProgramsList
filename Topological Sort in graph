// This is my implementation of Topological Sorting.
// main function (Not provided here) calls the function topoSort 
// topoSort() recieves 2 argumants - graph and number of vertices and returns array containing the sorted vertices
// Graph is implemented as ArrayList<ArrayList<Integer>> adj

static Stack<Integer> dfs(ArrayList<ArrayList<Integer>> adj, Stack<Integer> s,
                                boolean visited[], int i)
    {
         visited[i] = true;
         for(Integer x : adj.get(i))
         {
             if(!visited[x])
             {
                 s = dfs(adj,s,visited,x);
             }
         }
         s.push(i);
         return s;
         
    }
	
static int[] topoSort(ArrayList<ArrayList<Integer>> adj, int V) 
    {
          
          Stack<Integer> s = new Stack<Integer>();
          boolean visited[] = new boolean[V];
          Arrays.fill(visited,false);
          for(int i=0;i<V;i++)
          {
               if(!visited[i])
               {
                   dfs(adj,s,visited,i);
               }
          }
          int ans[] = new int[V];
          for(int i=0;i<V;i++)
          {
              ans[i] = s.pop();
          }
          return ans;
    }
